<?php

/**
 * This class describes the game Model object, used to control game objects
 *
 * @author     Emiel Suilen
 * @copyright  Derelict Studios
 * @category   objects
 * @package    worldmap
 * @subpackage mvc
 */
class game extends model
{
    const SUCCESS           = 1;
    const FAILURE           = 0;
    const CHANGE_MENU       = -1;
    const KEY_EXISTS        = -2;
    const EMPTY_PASSWORD    = -3;

    /**
     * @var array $game
     */
    protected $game = null;

    /**
     * @var int $id
     */
    protected $id;

    /**
     * Construct a game object, and handle it's printing
     */
    public function __construct()
    {
        $this->controller = new gameController("game");
        $this->view       = new gameView();

        $this->game = $this->controller->determineGame();
        $this->id = $this->game['id'];
        $this->view->setGameKey($this->game['key']);

        $games = $this->controller->getAllGames();
        $menu = new menu();
        $menuHtml = $menu->returnMenu($this->id, $this->game['key'], $games);
        $this->view->addHtml($menuHtml['menu'], 'menu');
        $this->view->setJavascript($menuHtml['javascript']);

        switch($this->id) {
            case -1:
                $this->handleLinks();
                break;
            case -2:
                $this->handleAdminGame();
                break;
            case -3:
                $this->handleDevGame();
                break;
            default:
                $this->handleGame();
                break;
        }        
        $sqlTable = $this->generateSQLDebugTable();
        $this->view->addHtml($sqlTable);

        $this->view->render();
    }

    /**
     * Return the HTML generated by the view
     *
     * @return string   The HTML
     */
    public function returnHtml()
    {
        return $this->view->getHtml();
    }

    /**
     * Make sure the selected game is handled properly
     */
    protected function handleGame()
    {
        $this->view->generateGameScreen($this->game);
    }

    /**
     * Make sure all links are handled properly
     */
    protected function handleLinks()
    {
    }

    /**
     * Handle all admin functionalities
     */
    protected function handleAdminGame()
    {
        if(!empty($_POST)) {
            if (isset($_POST['cancel'])) {
                break;
            }
            $return = $this->controller->handleAdminPost();
            switch($return) {
            case self::CHANGE_MENU:
                $games = $this->controller->getAllGames();
                $menu = new menu();
                $menuHtml = $menu->returnMenu($this->id, $this->game['key'], $games);
                $this->view->addHtml($menuHtml['menu'], 'menu');
                break;
            case static::KEY_EXISTS:
                if (isset($_POST['id'])) {
                    $_GET['id'] = $_POST['id'];
                } else{
                    $_GET['id'] = 'new';
                }
                switch($_GET['menu']) {
                case 'game':
                    $game = array(
                        'name' => $_POST['name'],
                        'warning' => static::KEY_EXISTS
                    );
                    $this->view->editGame($game);
                    return;
                break;
                case 'user':
                    $user = array(
                        'username' => $_POST['username'],
                        'warning' => static::KEY_EXISTS
                    );
                    $this->view->editUser($user);
                    return;
                }
                break;
            }
        }
        if(!isset($_GET['menu'])) {
            $_GET['menu'] = "";
        }   
        switch($_GET['menu']) {
        case 'game':
            if(isset($_GET['id'])) {
                $game = $this->controller->getGame($_GET['id']);
                $this->view->editGame($game);
            } else{
                $games = $this->controller->getAllGames();
                $this->view->generateGameEditScreen($games);
            }
        break;
        case 'user':
            if(isset($_GET['id'])) {
                $user = $this->controller->getUser($_GET['id']);
                $this->view->editUser($user);
            } else{
                $users = $this->controller->getAllUsers();
                $this->view->generateUserEditScreen($users);
            }
        break;
        default:
            $counts = $this->controller->getAdminCounts();
            $this->view->generateAdminScreen($counts);
        break;
        }
    }

    /**
     * Make sure all development functions are handled
     */
    protected function handleDevGame()
    {
        if(!isset($_GET['menu'])) {
            $_GET['menu'] = "";
        }   
        switch($_GET['menu']) {
        case 'test':
            $phpUnit = new phpUnit("tests/source");

            $phpUnit->executeTests();
            $testHtml = $phpUnit->returnTable();

            $this->view->generateDevelScreen($testHtml);
            break;
        case 'install':
            echo "Here be the installer";
            break;
        }
    }

    /**
     * Generates the SQL Debug table. Moved here for convenience,
     * should be properly placed later.
     */
    protected function generateSQLDebugTable()
    {
        global $mysqlDB;
        $sqlLog = $mysqlDB->getSQLLog();
        $sqlTable = array(
            array(
                "#", "Time", "Memory", "Query"
            )
        );
        foreach($sqlLog as $i => $log) {
            $log = explode(";", $log);
            $sqlTable[] = array(
                $i+1,
                str_replace("SQL Query: ", "", $log[0]),
                $log[1],
                str_replace(
                    array(" query: [", "]"), 
                    "", 
                    $log[2]
                )
            );
        }
        return htmlChunk::generateTableFromArray($sqlTable, true, true);
    }
}
